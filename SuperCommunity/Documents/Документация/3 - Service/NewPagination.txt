Для того, чтобы реализовать постраничный вывод
информации в приложении используется следующий шаблон:

1) Создание класса типа PaginationFinder нужного типа,
который должен реализовать способ возврата блока 
сущностей, на основе которых будет сформирована модель (IPageModel)
для строго типизированного представления с использованием нужного способа 
сортировки элементов (например, по возрастанию id).
Примечание: в конструкторе поисковика нужно определить:
1 - свойство Table (в какой таблице хранятся сущности)
2 - свойство ElementsLength (общее количество элементов,
для которых создается пагинация. Пример: если поиск по всей
таблице, то можно просто передать количество ее элементов в 
свойство)
Метод GetPageList возвращает список объектов EntityObject,
а не список моделей для чтения или редактирования.

2) Создание класса типа PaginationService, нужного типа.
В классе, кроме требуемого определения конструктора, можно 
ничего не добавлять.
Обеспечивает правильную работу пагинации (корректность запросов)
Методы: 
1 - GetPageObjects 
Возврат нужного списка с использованием PaginationFinder.
Возвращает объекты EntityObject.
2- GetPagesCount
Возврат общего количества страниц для данной пагинации

3) Создать экземпляр класса, который был реализован в 
пункте 2.
Параметры конструктора:
1 - Размер блока (количество сущностей в блоке)
2 - PaginationFinder, который был реализован в пункте 1

У класса есть два публичных метода:
- GetPage(номер страницы)
Возвращает блок для этого номера страницы

- GetPagesCount()
Возвращает общее количество страниц, на которое разбит
весь контент